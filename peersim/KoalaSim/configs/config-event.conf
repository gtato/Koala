# network size
SIZE 1000
NR_DC 1000
NR_NODE_PER_DC 10 


# parameters of periodic execution
CYCLES 10000
CYCLE SIZE*10000

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 0
# drop is a probability, 0<=DROP<=1
DROP 0
#We have just defined a number of constants to make the configuration file cleaner and easier to change from the command line. For example, CYCLE defines the length of a cycle.

msg.categories 3

logging.msg 0 # 1:only send, 2: only receive, 3: both
logging.nodes 0


#random.seed 1234567890

network.size SIZE

simulation.endtime CYCLES #CYCLE*CYCLES
simulation.logtime CYCLE
#simulation.experiments 10

#ALPHA 0.5
range.0 ALPHA;0,0.5,1
range.1 EXP;1:10

protocol.rnode RenaterNode

protocol.knode KoalaNode
{
 linkable rnode
}

protocol.cnode ChordNode

init.0 RenaterInitializer
{
 protocol knode
 cprotocol cnode
 distance 0.01
}

init.1 WireRenater
{
 protocol rnode
 world_size 1
strategy closest
#strategy gradual 
#strategy waxman
 undirected
#k 4
}

init.2 KoalaInitializer
{
 protocol renater
 kprotocol koala
longlinks true
 #nr 4
}

init.3 CreateNw 
{
 protocol cnode
 idLength 128
 succListSize 12
}


protocol.tr UniformRandomTransport
{
 mindelay MINDELAY
 maxdelay MAXDELAY
}


protocol.renater RenaterProtocol
{
 linkable rnode
 transport tr
}

protocol.koala KoalaProtocol
{
 linkable knode
 transport tr
 learn false
}

protocol.chord ChordProtocol
{
 linkable cnode
 transport tr
}

control.planner KoalaPlanner
{
 protocol renater
 kprotocol koala
 cprotocol chord
 step 1	
}

control.rentop RenaterTopologyObserver
{
 protocol rnode
 FINAL 
 at CYCLES
}

control.kotop KoalaTopologyObserver
{
 protocol knode 
 FINAL 
 at CYCLES
}

control.koi KoalaNodeObserver
{
 protocol knode 
 FINAL
 step (CYCLES/200)
#step (CYCLES/20)
}


control.collector ResultCollector
{
 protocol renater
 kprotocol koala
 cprotocol chord
 FINAL
 step 1 
}




