# network size
SIZE 1000 #8192
NR_DC 1000 #8192
NR_NODE_PER_DC 3 

#koala stuff
NEIGHBORS 1
#LONG_LINKS 3
CC 1

#chord stuff
#M 7
SUCC_SIZE 3


CYCLES 1000 #2000000
CYCLE SIZE*10000


MINDELAY 0
MAXDELAY 0
# drop is a probability, 0<=DROP<=1
DROP 0

msg.categories 3

logging.msg 0 # 1:only send, 2: only receive, 3: both
logging.nodes 0

koala.settings.piggyback 50
koala.settings.dijkstramethod ram #ram, db, spaas, hipster
#koala.settings.world_size 1  

koala.settings.nested false

random.seed 1234567890
#random.seed  203030

network.size SIZE

simulation.endtime CYCLES #CYCLE*CYCLES
simulation.logtime CYCLE
#simulation.experiments 10

ALPHA 1
range.0 ALPHA;-1,0,0.5,1
#range.1 EXP;1:10

protocol.rnode RenaterNode

protocol.knode KoalaNode
{
	linkable rnode 
}

protocol.cnode ChordNode

init.0 RenaterInitializer
{
	protocol knode
	cprotocol cnode
	distance 0.01
}

init.1 WireRenater
{
	protocol rnode
	#strategy closest
	#strategy gradualrandom
	#strategy gradual 
	strategy waxman
	undirected
	#k 4
}

# init.2 ChordInitializer
# {
# 	protocol chord
# }

init.3 KoalaInitializer
{
	protocol renater
	kprotocol koala
	cprotocol chord
	#initialize true # assigns immediately neighbors and long links (like chord does)
  	nr 0
}


protocol.tr UniformRandomTransport
{
	mindelay MINDELAY
	maxdelay MAXDELAY
}


protocol.renater RenaterProtocol
{
	linkable rnode
	transport tr
	skip true
}

protocol.koala KoalaProtocol
{
	linkable knode
	transport tr
	learn true
}
# 
# protocol.chord ChordProtocol
# {
# 	linkable cnode
# 	transport tr
# }

# control.maintain ChordMaintainer
# {
# 	protocol chord
# 	step 100
# }

control.dnet KoalaDynamicNetwork
{
	add 1
	minsize 25 # in %
# 	mode rand
	step 1
	alt false
# 	init.0 ChordInitializer
# 	{      
# 		protocol chord
# 	}
	
	init.1 KoalaInitializer
	{      
		protocol renater
		kprotocol koala
# 		cprotocol chord
		longlinks false
	}
}
# 
# 
# control.dnet2 KoalaDynamicNetwork
# {
# 	add 1
# 	minsize 25 # in %
# # 	mode rand
# 	step 10
# 	alt true
# 	from 5
# # 	init.0 ChordInitializer
# # 	{      
# # 		protocol chord
# # 	}
# 	
# 	init.1 KoalaInitializer
# 	{      
# 		protocol renater
# 		kprotocol koala
# # 		cprotocol chord
# 		longlinks false
# 	}
# }



control.planner TrafficGenerator
{
	protocol renater
	kprotocol koala
	cprotocol chord
	step 1	
}

# control.rdifference DifferenceFactor
# {
# 	protocol knode 
# # 	step 100
# 	at 8000 
# 	FINAL	
# }


# control.rentop RenaterTopologyObserver
# {
# 	protocol rnode
# 	FINAL 
# 	at CYCLES
# }
# 
# control.kotop KoalaTopologyObserver
# {
# 	protocol knode 
# 	FINAL 
# 	at CYCLES
# }
# 
# control.koi KoalaNodeObserver
# {
# 	protocol knode 
# 	FINAL
# 	#step (CYCLES/200)
# 	step (CYCLES/20)
# }


control.qollector ResultCollector
{
	protocol renater
	kprotocol koala
	cprotocol chord
# 	FINAL
	step 1 
	flush 1000
}

control.terminator Terminate
{
	FINAL
	at CYCLES
}



